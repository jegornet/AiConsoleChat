СТРУКТУРА ПРОЕКТА AiConsoleChat
================================

Описание функциональности каждого Python файла в проекте:

1. main.py
----------
Точка входа приложения. Координирует работу всех компонентов:
- Загружает переменные окружения
- Инициализирует основные классы (MCPConnection, ClaudeChat, ChatInterface)
- Загружает конфигурацию MCP серверов
- Устанавливает соединение с MCP сервером
- Запускает интерактивный чат-интерфейс
- Обеспечивает корректное завершение работы и очистку ресурсов

2. config.py
------------
Файл конфигурации с константами приложения:
- MODEL: модель Claude для использования
- MAX_TOKENS: максимальное количество токенов в ответе
- IS_MULTILINE: режим многострочного ввода
- SYSTEM_PROMPT: системное сообщение для Claude бота

3. mcp_connection.py
-------------------
Класс MCPConnection для работы с MCP (Model Context Protocol) серверами:
- Управляет подключением к MCP серверам через stdio
- Получает список доступных инструментов от сервера
- Выполняет вызовы инструментов с обработкой ошибок
- Предоставляет асинхронный интерфейс для взаимодействия
- Управляет жизненным циклом соединения и очисткой ресурсов

4. claude_chat.py
----------------
Класс ClaudeChat для взаимодействия с API Anthropic Claude:
- Обрабатывает запросы пользователя через Claude API
- Управляет настройками токенов
- Реализует логику итеративного выполнения запросов с инструментами
- Обрабатывает цепочки вызовов инструментов и ответов
- Форматирует финальный ответ для пользователя

5. chat_interface.py
-------------------
Класс ChatInterface для управления пользовательским интерфейсом:
- Реализует интерактивный чат-интерфейс
- Поддерживает однострочный и многострочный режимы ввода
- Управляет буфером многострочного ввода
- Координирует обработку команд через SlashCommandHandler
- Обеспечивает основной цикл взаимодействия с пользователем

6. slash_commands.py
-------------------
Класс SlashCommandHandler для обработки слеш-команд:
- Обрабатывает команды: /quit, /max_tokens, /multiline
- Управляет настройками max_tokens и multiline режима
- Отображает справочную информацию
- Предоставляет единый интерфейс для обработки всех команд
- Возвращает статус обработки команд

7. mcp_config_loader.py
----------------------
Класс McpConfigLoader для загрузки конфигурации MCP серверов:
- Загружает и валидирует файл конфигурации mcp.json
- Проверяет наличие и корректность конфигурации серверов
- Предоставляет методы для получения конфигурации первого сервера
- Обрабатывает ошибки загрузки и парсинга конфигурации

8. mcp_server.py
---------------
MCP сервер для работы с файловой системой:
- Реализует MCP сервер с инструментами для файловых операций
- Предоставляет инструменты: list_files, read_file, write_file, delete_file
- Обеспечивает безопасность через ограничение доступа к рабочей директории
- Обрабатывает различные кодировки файлов (UTF-8, Latin-1)
- Автоматически создает директории при записи файлов

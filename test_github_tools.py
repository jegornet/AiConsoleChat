#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –≤ GitHub MCP —Å–µ—Ä–≤–µ—Ä–µ
"""

import asyncio
import os
from dotenv import load_dotenv
from mcp_client_github import GitHubMCPClient

async def main():
    load_dotenv()
    
    github_token = os.getenv("GITHUB_PERSONAL_ACCESS_TOKEN")
    if not github_token:
        print("–û—à–∏–±–∫–∞: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è GITHUB_PERSONAL_ACCESS_TOKEN")
        return 1
        
    client = GitHubMCPClient(github_token, debug=True)
    
    try:
        print("–ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –∏–∑ GitHub MCP —Å–µ—Ä–≤–µ—Ä–∞...")
        tools = await client.get_tools_schema()
        
        print(f"\n–î–æ—Å—Ç—É–ø–Ω–æ {len(tools)} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤:")
        for tool_name, tool_info in tools.items():
            print(f"\nüîß {tool_name}")
            print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {tool_info.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}")
            if 'inputSchema' in tool_info and 'properties' in tool_info['inputSchema']:
                print(f"   –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {list(tool_info['inputSchema']['properties'].keys())}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(main())
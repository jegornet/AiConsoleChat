#!/usr/bin/env python3
"""
MCP –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å StatsMCP —Å–µ—Ä–≤–µ—Ä–æ–º
"""

import json
import traceback
from mcp import ClientSession, StdioServerParameters
from mcp.client.stdio import stdio_client
import sys
import os


class StatsMCPClient:
    def __init__(self, github_token: str, debug=True):
        self.github_token = github_token
        self.debug = debug
        self.server_params = StdioServerParameters(
            command="python3",
            args=["-c", f"""
import sys
import os
sys.path.insert(0, '{os.getcwd()}')
os.environ['GITHUB_PERSONAL_ACCESS_TOKEN'] = '{github_token}'
if {debug}:
    os.environ['DEBUG'] = 'true'
from mcp_server_stats import main
import asyncio
asyncio.run(main())
"""]
        )
        self._tools_cache = None

    def _log(self, message):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
        if self.debug:
            print(f"üìä StatsMCP Client: {message}")

    async def get_tools_schema(self):
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å—Ö–µ–º—É –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –æ—Ç StatsMCP —Å–µ—Ä–≤–µ—Ä–∞
        """
        if self._tools_cache is not None:
            return self._tools_cache

        try:
            self._log("–ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ StatsMCP —Å–µ—Ä–≤–µ—Ä—É...")

            async with stdio_client(self.server_params) as (read, write):
                async with ClientSession(read, write) as session:
                    self._log("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é...")
                    await session.initialize()

                    self._log("–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤...")
                    tools_response = await session.list_tools()

                    tools_schema = {}
                    for tool in tools_response.tools:
                        tools_schema[tool.name] = {
                            'description': tool.description,
                            'inputSchema': tool.inputSchema
                        }
                        self._log(f"–ù–∞–π–¥–µ–Ω –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {tool.name}")

                    self._tools_cache = tools_schema
                    self._log(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(tools_schema)} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤")
                    return tools_schema

        except Exception as e:
            self._log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ö–µ–º—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {e}")
            traceback.print_exc()
            raise

    async def call_tool(self, tool_name: str, parameters: dict = None):
        """
        –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –≤—ã–∑–æ–≤–∞ –ª—é–±–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ StatsMCP
        """
        if parameters is None:
            parameters = {}

        try:
            self._log(f"–í—ã–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {tool_name}")
            self._log(f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {json.dumps(parameters, indent=2, ensure_ascii=False)}")

            async with stdio_client(self.server_params) as (read, write):
                async with ClientSession(read, write) as session:
                    await session.initialize()

                    self._log("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ StatsMCP —Å–µ—Ä–≤–µ—Ä—É...")
                    result = await session.call_tool(tool_name, parameters)

                    self._log("–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç StatsMCP —Å–µ—Ä–≤–µ—Ä–∞")
                    self._log(f"–¢–∏–ø –æ—Ç–≤–µ—Ç–∞: {type(result)}")
                    response_text = result.content[0].text
                    preview = response_text[:200] + "..." if len(response_text) > 200 else response_text
                    self._log(f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ: {preview}")

                    return response_text

        except Exception as e:
            self._log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ {tool_name}: {e}")
            self._log(f"–¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")

            # –ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥ –¥–ª—è ExceptionGroup
            if hasattr(e, 'exceptions'):  # ExceptionGroup
                self._log(f"–≠—Ç–æ ExceptionGroup —Å {len(e.exceptions)} –∏—Å–∫–ª—é—á–µ–Ω–∏—è–º–∏:")
                for i, sub_e in enumerate(e.exceptions):
                    self._log(f"  –ò—Å–∫–ª—é—á–µ–Ω–∏–µ {i + 1}: {type(sub_e).__name__}: {sub_e}")

            traceback.print_exc()
            raise
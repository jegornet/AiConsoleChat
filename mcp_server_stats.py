#!/usr/bin/env python3
"""
StatsMCP - MCP —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ GitHub —á–µ—Ä–µ–∑ GitHubMCPClient
"""

import json
import asyncio
import traceback
from typing import Dict, Any
from mcp import Tool
from mcp.server import Server
from mcp.server.stdio import stdio_server
from mcp.types import JSONRPCError, TextContent, ServerCapabilities
from mcp.server.lowlevel.server import InitializationOptions

from mcp_client_github import GitHubMCPClient


class StatsMCPServer:
    def __init__(self, github_token: str, debug: bool = False):
        self.github_client = GitHubMCPClient(github_token, debug=debug)
        self.debug = debug
        self.app = Server("stats-mcp")
        self._setup_tools()

    def _log(self, message):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
        if self.debug:
            print(f"üìä StatsMCP: {message}")

    def _setup_tools(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ MCP —Å–µ—Ä–≤–µ—Ä–∞"""
        
        @self.app.list_tools()
        async def list_tools() -> list[Tool]:
            return [
                Tool(
                    name="github_stats",
                    description="–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–æ–º–º–∏—Ç–∞–º –¥–ª—è –≤—Å–µ—Ö —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è GitHub",
                    inputSchema={
                        "type": "object",
                        "properties": {},
                        "required": []
                    }
                )
            ]

        @self.app.call_tool()
        async def call_tool(name: str, arguments: Dict[str, Any] | None = None) -> list[dict]:
            if name == "github_stats":
                return await self._get_github_stats()
            else:
                raise JSONRPCError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {name}")

    async def _get_github_stats(self) -> list[dict]:
        """–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ GitHub"""
        try:
            self._log("–ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ GitHub...")

            # 1. –ù–∞–π—Ç–∏ –∏–º—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ GitHub
            self._log("–ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ...")
            user_info = await self.github_client.call_tool("get_me")
            user_data = json.loads(user_info)
            username = user_data['login']
            self._log(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}")

            # 2. –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            self._log("–ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤...")
            repos_info = await self.github_client.call_tool("search_repositories", {"query": f"user:{username}"})
            repos_data = json.loads(repos_info)
            # search_repositories –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É {"items": [...], "total_count": ...}
            repos_list = repos_data.get("items", [])
            self._log(f"–ù–∞–π–¥–µ–Ω–æ {len(repos_list)} —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤")

            stats = {
                "username": username,
                "repositories": [],
                "total_commits": 0,
                "total_repositories": len(repos_list)
            }

            # 3-5. –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –ø–æ–ª—É—á–∏—Ç—å –≤–µ—Ç–∫–∏ –∏ –ø–æ—Å—á–∏—Ç–∞—Ç—å –∫–æ–º–º–∏—Ç—ã
            for repo in repos_list:
                repo_name = repo['name']
                repo_full_name = repo['full_name']
                self._log(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: {repo_name}")

                try:
                    # –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤–µ—Ç–æ–∫ –¥–ª—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
                    branches_info = await self.github_client.call_tool("list_branches", {
                        "owner": username,
                        "repo": repo_name
                    })
                    branches_data = json.loads(branches_info)
                    self._log(f"  –ù–∞–π–¥–µ–Ω–æ {len(branches_data)} –≤–µ—Ç–æ–∫")

                    repo_stats = {
                        "name": repo_name,
                        "full_name": repo_full_name,
                        "branches": [],
                        "total_commits": 0
                    }

                    # –î–ª—è –∫–∞–∂–¥–æ–π –≤–µ—Ç–∫–∏ –ø–æ—Å—á–∏—Ç–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–∏—Ç–æ–≤
                    for branch in branches_data:
                        branch_name = branch['name']
                        self._log(f"    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–µ—Ç–∫—É: {branch_name}")

                        try:
                            # –ü–æ–ª—É—á–∏—Ç—å –∫–æ–º–º–∏—Ç—ã –≤ –≤–µ—Ç–∫–µ
                            commits_info = await self.github_client.call_tool("list_commits", {
                                "owner": username,
                                "repo": repo_name,
                                "sha": branch_name
                            })
                            commits_data = json.loads(commits_info)
                            commits_count = len(commits_data)
                            
                            branch_stats = {
                                "name": branch_name,
                                "commits_count": commits_count
                            }
                            
                            repo_stats["branches"].append(branch_stats)
                            repo_stats["total_commits"] += commits_count
                            self._log(f"      –ö–æ–º–º–∏—Ç–æ–≤ –≤ –≤–µ—Ç–∫–µ {branch_name}: {commits_count}")

                        except Exception as e:
                            self._log(f"      ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–º–º–∏—Ç–æ–≤ –¥–ª—è –≤–µ—Ç–∫–∏ {branch_name}: {e}")
                            # –î–æ–±–∞–≤–ª—è–µ–º –≤–µ—Ç–∫—É —Å –æ—à–∏–±–∫–æ–π
                            repo_stats["branches"].append({
                                "name": branch_name,
                                "commits_count": 0,
                                "error": str(e)
                            })

                    stats["repositories"].append(repo_stats)
                    stats["total_commits"] += repo_stats["total_commits"]
                    self._log(f"  –í—Å–µ–≥–æ –∫–æ–º–º–∏—Ç–æ–≤ –≤ {repo_name}: {repo_stats['total_commits']}")

                except Exception as e:
                    self._log(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è {repo_name}: {e}")
                    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Å –æ—à–∏–±–∫–æ–π
                    stats["repositories"].append({
                        "name": repo_name,
                        "full_name": repo_full_name,
                        "error": str(e),
                        "branches": [],
                        "total_commits": 0
                    })

            self._log(f"–°–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω. –í—Å–µ–≥–æ –∫–æ–º–º–∏—Ç–æ–≤: {stats['total_commits']}")

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ MCP
            return [TextContent(type="text", text=json.dumps(stats, indent=2, ensure_ascii=False))]

        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}"
            self._log(f"‚ùå {error_msg}")
            traceback.print_exc()
            return [TextContent(type="text", text=json.dumps({"error": error_msg}, ensure_ascii=False))]

    async def run(self):
        """–ó–∞–ø—É—Å–∫ MCP —Å–µ—Ä–≤–µ—Ä–∞"""
        self._log("–ó–∞–ø—É—Å–∫ StatsMCP —Å–µ—Ä–≤–µ—Ä–∞...")
        async with stdio_server() as streams:
            init_options = InitializationOptions(
                server_name="stats-mcp",
                server_version="1.0.0", 
                capabilities=ServerCapabilities(tools={})
            )
            await self.app.run(*streams, init_options)


async def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"""
    import os
    from dotenv import load_dotenv
    
    load_dotenv()
    
    github_token = os.getenv("GITHUB_PERSONAL_ACCESS_TOKEN")
    if not github_token:
        print("–û—à–∏–±–∫–∞: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è GITHUB_PERSONAL_ACCESS_TOKEN")
        return 1
        
    debug = os.getenv("DEBUG", "").lower() in ("true", "1", "yes")
    
    server = StatsMCPServer(github_token, debug=debug)
    await server.run()


if __name__ == "__main__":
    asyncio.run(main())
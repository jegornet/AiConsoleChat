#!/usr/bin/env python3
"""
MCP —Å–µ—Ä–≤–µ—Ä –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è Python –∫–æ–¥–∞ –≤ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
"""

import asyncio
import logging
import sys
from mcp.server.lowlevel import Server, NotificationOptions
from mcp.server.models import InitializationOptions
from mcp.server.stdio import stdio_server
from mcp.types import (
    Tool,
    TextContent,
    CallToolResult,
)
import docker


class PythonDockerMCPServer:
    def __init__(self):
        self.server = Server("python-docker-executor")
        self.docker_client = None
        self._setup_logging()
        self._setup_docker()
        self._setup_tools()

    def _setup_logging(self):
        logging.basicConfig(level=logging.INFO)
        self.logger = logging.getLogger(__name__)

    def _setup_docker(self):
        try:
            self.docker_client = docker.from_env()
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Docker
            self.docker_client.ping()
            self.logger.info("Docker –∫–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—Ä–∞–∑–∞ Python
            try:
                self.docker_client.images.get("python:3")
                self.logger.info("Docker –æ–±—Ä–∞–∑ 'python:3' –Ω–∞–π–¥–µ–Ω")
            except docker.errors.ImageNotFound:
                self.logger.info("–ó–∞–≥—Ä—É–∂–∞–µ–º Docker –æ–±—Ä–∞–∑ 'python:3'...")
                self.docker_client.images.pull("python:3")

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Docker: {e}")
            raise

    def _setup_tools(self):
        @self.server.list_tools()
        async def handle_list_tools() -> list[Tool]:
            return [
                Tool(
                    name="execute_python",
                    description="–í—ã–ø–æ–ª–Ω—è–µ—Ç Python –∫–æ–¥ –≤ –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–º Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ",
                    inputSchema={
                        "type": "object",
                        "properties": {
                            "code": {
                                "type": "string",
                                "description": "Python –∫–æ–¥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"
                            }
                        },
                        "required": ["code"]
                    }
                )
            ]

        @self.server.call_tool()
        async def handle_call_tool(name: str, arguments: dict) -> CallToolResult:
            if name == "execute_python":
                return await self._execute_python(arguments.get("code", ""))
            else:
                raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {name}")

    async def _execute_python(self, code: str) -> CallToolResult:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç Python –∫–æ–¥ –≤ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ"""
        try:
            self.logger.info(f"–í—ã–ø–æ–ª–Ω—è–µ–º Python –∫–æ–¥: {code[:100]}...")

            # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å Python –∫–æ–¥–æ–º
            result = self.docker_client.containers.run(
                "python:3",
                ["python", "-c", code],
                remove=True,
            )

            output = result.decode('utf-8') if isinstance(result, bytes) else str(result)
            self.logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {output[:100]}...")

            return CallToolResult(
                content=[TextContent(type="text", text=output)]
            )

        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {str(e)}"
            self.logger.error(error_msg)
            return CallToolResult(
                content=[TextContent(type="text", text=error_msg)]
            )

    def execute_code_direct(self, code: str) -> str:
        """
        –ü—Ä—è–º–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–¥–∞ –±–µ–∑ MCP –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
        """
        try:
            self.logger.info(f"–ü—Ä—è–º–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–¥–∞: {code[:100]}...")

            result = self.docker_client.containers.run(
                "python:3",
                ["python", "-c", code],
                remove=True,
            )

            output = result.decode('utf-8') if isinstance(result, bytes) else str(result)
            self.logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {output}")
            return output

        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {str(e)}"
            self.logger.error(error_msg)
            return error_msg

    async def run_server(self):
        """–ó–∞–ø—É—Å–∫ MCP —Å–µ—Ä–≤–µ—Ä–∞"""
        self.logger.info("–ó–∞–ø—É—Å–∫ MCP —Å–µ—Ä–≤–µ—Ä–∞ 'python-docker-executor'...")

        async with stdio_server() as (read_stream, write_stream):
            await self.server.run(
                read_stream,
                write_stream,
                InitializationOptions(
                    server_name="python-docker-executor",
                    server_version="1.0.0",
                    capabilities=self.server.get_capabilities(
                        notification_options=NotificationOptions(),
                        experimental_capabilities={},
                    ),
                ),
            )


def main():
    # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –∞—Ä–≥—É–º–µ–Ω—Ç --test, –≤—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä—è–º–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    if len(sys.argv) > 1 and sys.argv[1] == "--test":
        print("üß™ –†–µ–∂–∏–º –ø—Ä—è–º–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")
        try:
            server = PythonDockerMCPServer()
            print("‚úÖ –°–µ—Ä–≤–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")

            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–¥–∞
            print("\nüìù –¢–µ—Å—Ç 1: –ü—Ä–æ—Å—Ç–æ–π –≤—ã–≤–æ–¥")
            result = server.execute_code_direct("print('Python code test ok')")
            print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")

            # –ï—â–µ –æ–¥–∏–Ω —Ç–µ—Å—Ç
            print("\nüìù –¢–µ—Å—Ç 2: –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è")
            result = server.execute_code_direct("""
import math
result = math.sqrt(16)
print(f"sqrt(16) = {result}")
for i in range(3):
    print(f"–ò—Ç–µ—Ä–∞—Ü–∏—è {i}")
            """)
            print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")

            # –¢–µ—Å—Ç —Å –±–∏–±–ª–∏–æ—Ç–µ–∫–∞–º–∏
            print("\nüìù –¢–µ—Å—Ç 3: –†–∞–±–æ—Ç–∞ —Å –±–∏–±–ª–∏–æ—Ç–µ–∫–∞–º–∏")
            result = server.execute_code_direct("""
import json
import datetime

data = {
    "timestamp": str(datetime.datetime.now()),
    "message": "–¢–µ—Å—Ç —É—Å–ø–µ—à–µ–Ω!",
    "numbers": [1, 2, 3, 4, 5]
}

print(json.dumps(data, indent=2, ensure_ascii=False))
            """)
            print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")

            print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö: {e}")
            import traceback
            traceback.print_exc()

    else:
        # –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º MCP —Å–µ—Ä–≤–µ—Ä–∞
        print("üöÄ –°–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        print("üí° –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—É—Å—Ç–∏—Ç–µ: python mcp_server_python.py --test")
        try:
            server = PythonDockerMCPServer()
            asyncio.run(server.run_server())
        except KeyboardInterrupt:
            print("\nüëã –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
            import traceback
            traceback.print_exc()


if __name__ == "__main__":
    main()